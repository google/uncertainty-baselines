# Copyright 2022 The Uncertainty Baselines Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# BE model configurations specific to semantic parsing tasks.
from __gin__ import dynamic_registration

import seqio
from t5x import adafactor
from t5x.examples.t5 import network

import decoding  # local file import from baselines.t5
from models import be_models  # local file import from baselines.t5
from uncertainty_baselines.models import t5_batchensemble

# Loss HParam defaults
# NOTE: When fine-tuning the public T5 checkpoints (trained in T5 MeshTF)
# the loss normalizing factor should be set to 1024 * 228 (pretraining
# batch_size * target_token_length).
Z_LOSS = 0.0001
LABEL_SMOOTHING = 0.0
LOSS_NORMALIZING_FACTOR = 233472
DROPOUT_RATE = 0.1

# Optimizer
# `learning_rate` is set by `Trainer.learning_rate_fn`.
OPTIMIZER = @adafactor.Adafactor()
adafactor.Adafactor:
  decay_rate = 0.8
  step_offset = 0

# Vocabulary (shared by encoder and decoder)
VOCABULARY = @seqio.SentencePieceVocabulary()
seqio.SentencePieceVocabulary.sentencepiece_model_file = "/bigstore/t5-data/vocabs/cc_all.32000.100extra/sentencepiece.model"
NUM_EMBEDDINGS = 32128  # vocab size rounded to a multiple of 128 for TPU efficiency

# Model class.
MODEL = @be_models.EncoderDecoderBEBeamScoreModel()
be_models.EncoderDecoderBEBeamScoreModel:
  module = @t5_batchensemble.TransformerBE()
  input_vocabulary = %VOCABULARY
  output_vocabulary = %VOCABULARY
  optimizer_def = %OPTIMIZER
  z_loss = %Z_LOSS
  label_smoothing = %LABEL_SMOOTHING
  loss_normalizing_factor = %LOSS_NORMALIZING_FACTOR

network.T5Config:
  vocab_size = %NUM_EMBEDDINGS
  dtype = 'bfloat16'
  head_dim = 64
  dropout_rate = %DROPOUT_RATE

RANDOM_SIGN = 0.5
BE_ENS_SIZE = 3
t5_batchensemble.TransformerBE:
  config = @network.T5Config()
  ens_size = %BE_ENS_SIZE
  random_sign_init = %RANDOM_SIGN
  be_decoder_layers= (-1,)

# Decoding override to write Top-K beams and scores to output.
NUM_DECODES = 5
RETURN_ALL_DECODES = False
RETURN_SCORES = False
be_models.EncoderDecoderBEBeamScoreModel.predict_batch_with_aux.num_decodes = %NUM_DECODES
be_models.EncoderDecoderBEBeamScoreModel.predict_batch_with_aux.return_all_decodes = %RETURN_ALL_DECODES
be_models.EncoderDecoderBEBeamScoreModel.predict_batch.return_scores = %RETURN_SCORES

# Set beam search parameters.
RETURN_TOKEN_SCORES = True
be_models.EncoderDecoderBEBeamScoreModel.decode_fn = @decoding.beam_search
decoding.beam_search.alpha = 0.6
decoding.beam_search.return_token_scores = %RETURN_TOKEN_SCORES
